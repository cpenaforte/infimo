{"version":3,"sources":["webpack://Infimo/webpack/universalModuleDefinition","webpack://Infimo/./src/subclasses/NameRegister.ts","webpack://Infimo/./src/subclasses/Ref.ts","webpack://Infimo/./src/utils.ts","webpack://Infimo/webpack/bootstrap","webpack://Infimo/./src/main.ts"],"names":["root","factory","exports","module","define","amd","self","names","constructor","this","registerName","name","type","nameExist","Error","nameObj","push","registerNames","let","find","n","some","getNames","value","updateValue","getName","getValue","basicParamParse","p","refs","ref","r","Number","isNaN","startsWith","endsWith","replace","NaN","includes","split","map","a","trimmed","trim","o","key","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","appId","template","listeners","namesRegister","infimoObject","data","watch","methods","notifyListeners","newValue","oldValue","forEach","listener","build","dataParse","registeredName","dataRef","Object","defineProperties","get","set","dataProp","entries","watchParse","watchProp","methodsParse","method","methodRef","defineProperty","methodsProp","parseTemplate","rebuiltString","match","regex","functionParams","RegExp","parsedTemplate","step","document","createElement","element","innerHTML","firstElementChild","querySelector","appendChild"],"mappings":"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","file":"infimo.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Infimo\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Infimo\"] = factory();\n\telse\n\t\troot[\"Infimo\"] = factory();\n})(self, () => {\nreturn ","import { PropType, RegisteredName, RegisteredNames } from \"../types\";\n\nexport default class NameRegister {\n    private names: RegisteredNames;\n\n    constructor() {\n        this.names = [];\n    }\n\n    registerName(name: string, type: PropType): RegisteredName {\n        // Check if name already exists\n        if (this.nameExist(name)) {\n            throw new Error(`Name ${name} already exists`);\n        }\n\n        const nameObj = {name, type};\n\n        this.names.push(nameObj);\n\n        return nameObj;\n    }\n\n    registerNames(names: RegisteredNames): void {\n        // Check if names already exist\n        let nameExist = names.find(n => this.nameExist(n.name))?.name;\n\n        if (nameExist) {\n            throw new Error(`Name ${nameExist} already exists`);\n        }\n\n        this.names.push(...names);\n    }\n\n    nameExist(name: string): boolean {\n        return this.names.some(n => n.name === name);\n    }\n\n    getNames(): RegisteredNames {\n        return this.names;\n    }\n}","import { RegisteredName } from \"../types\";\n\nexport default class Ref<T> {\n    private name: RegisteredName;\n    private value: T;\n\n    constructor(name: RegisteredName, value: T) {\n        this.name = name;\n        this.value = value;\n    }\n\n    updateValue(value: T): void {\n        this.value = value;\n    }\n\n    getName(): RegisteredName {\n        return this.name;\n    }\n\n    getValue(): T {\n        return this.value;\n    }\n}","import Ref from \"./subclasses/Ref\";\n\nexport const basicParamParse = (p: string, refs: Ref<any>[]): any => {\n    const ref = refs.find(r => r.getName().name === p);\n    if (ref) {\n        return ref.getValue();\n    }\n\n    if (!Number.isNaN(Number(p))) {\n        return Number(p);\n    }\n\n    if (p === \"true\" || p === \"false\") {\n        return p === \"true\";\n    }\n\n    if (p.startsWith(\"'\") && p.endsWith(\"'\")) {\n        return p.replace(/'/g, \"\");\n    }\n\n    if (p.startsWith('\"') && p.endsWith('\"')) {\n        return p.replace(/\"/g, \"\");\n    }\n\n    if (p === \"undefined\") {\n        return undefined;\n    }\n\n    if (p === \"null\") {\n        return null;\n    }\n\n    if (p === \"NaN\") { \n        return NaN;\n    }\n\n    if (p.includes(\"[\") && p.includes(\"]\")) {\n        const array = p.replace(\"[\", \"\").replace(\"]\", \"\").split(\",\").map(a => {\n            const trimmed = a.trim();\n            return basicParamParse(trimmed, refs);\n        });\n        return array;\n    }\n\n    if (p.includes(\"{\") && p.includes(\"}\")) {\n        const obj = p.replace(\"{\", \"\").replace(\"}\", \"\").split(\",\").map(o => {\n            const [key, value] = o.split(\":\").map(p => p.trim());\n            return { [key]: basicParamParse(value, refs) };\n        });\n        return obj;\n    }\n\n    return p;\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { DataProp, PropType, Listeners, InfimoObject } from \"./types\";\nimport NameRegister from \"./subclasses/NameRegister\";\nimport Ref from \"./subclasses/Ref\";\nimport { basicParamParse } from \"./utils\";\n\nclass InfimoFactory {\n    private appId: string | undefined;\n    private template: string;\n    private listeners: Listeners;\n    private refs: Ref<any>[];\n    private namesRegister: NameRegister;\n\n    constructor(infimoObject: InfimoObject) {\n        this.template = infimoObject.template;\n        this.listeners = {};\n        this.refs = [];\n        this.namesRegister = new NameRegister();\n\n        this.data(infimoObject.data || {});\n        this.watch(infimoObject.watch || {});\n        this.methods(infimoObject.methods || {});\n    }\n\n    private notifyListeners<T>(name: string, newValue: T, oldValue: T): void {\n        if (this.listeners[name]) {\n            this.listeners[name].forEach(listener => listener(newValue, oldValue));\n        }\n\n        this.appId && this.build(this.appId);\n    }\n\n    private dataParse<T>(data: [string, T]): void {\n        const [name, value] = data;\n\n        const registeredName = this.namesRegister.registerName(name, PropType.DATA);\n\n        const dataRef = new Ref(registeredName, value);\n        this.refs.push(dataRef);\n\n        Object.defineProperties(this, {\n            [name]: {\n                get: () => dataRef.getValue(),\n                set: (newValue: T) => {\n                    const oldValue = dataRef.getValue();\n                    dataRef.updateValue(newValue);\n                    this.notifyListeners(name, newValue, oldValue);\n                }\n            }\n        });\n    }\n\n    data(dataProp: DataProp): void {\n        Object.entries(dataProp).forEach(data => this.dataParse(data));\n    }\n\n    private watchParse<T>(watch: [string, (newValue?: T, oldValue?: T) => void]): void {\n        const [name, value] = watch;\n\n        if (!this.namesRegister.nameExist(name)) {\n            throw new Error(`Name ${name} does not exist`);\n        }\n\n        if (!this.listeners[name]) {\n            this.listeners[name] = [];\n        }\n\n        this.listeners[name].push(value);\n    }\n\n    watch(watchProp: { [key: string]: (newValue?: any, oldValue?: any) => void }): void {\n        Object.entries(watchProp).forEach(watch => this.watchParse(watch));\n    }\n\n    private methodsParse(method: [string, Function]): void {\n        const [name, value] = method;\n\n        const registeredName = this.namesRegister.registerName(name, PropType.METHODS);\n\n        const methodRef = new Ref(registeredName, value);\n        this.refs.push(methodRef);\n\n        Object.defineProperty(this, name, methodRef.getValue());\n    }\n\n    methods(methodsProp: { [key: string]: Function }): void {\n        Object.entries(methodsProp).forEach(method => this.methodsParse(method));\n    }\n\n    private parseTemplate(): string {\n        const intermediate = `${this.template}`;\n\n        return intermediate.replace(/{{(.*?)}}/g, (match) => {\n            let rebuiltString = match;\n\n            this.refs.forEach(ref => {\n                if (rebuiltString.includes(ref.getName().name)) {\n                    if (typeof ref.getValue() === \"function\") {\n                        // use ref.getName().name to create a regex to find the function params then replace it with the function call\n                        const regex = new RegExp(`${ref.getName().name}\\\\((.*?)\\\\)`, \"g\");\n                        const matched = rebuiltString.match(regex) || [];\n                        \n                        const functionParams = matched.map((match: string) => {\n                            const paramsNamesList = match.replace(`${ref.getName().name}(`, \"\").replace(\")\", \"\").split(\",\").map((p: string) => p.trim());\n                            return paramsNamesList.map((p: string) => {\n                                return basicParamParse(p, this.refs);\n                            });\n                        });\n\n                        rebuiltString = rebuiltString.replace(regex, ref.getValue()(...functionParams));\n                    } else {\n                        rebuiltString = rebuiltString.replace(`${ref.getName().name}`, ref.getValue());\n                    }\n                }\n            });\n\n            return rebuiltString;\n        }).replace(/{{/g, \"\").replace(/}}/g, \"\");\n    }\n\n    build(appId: string): void {\n        this.appId = appId;\n\n        const parsedTemplate = this.parseTemplate();\n\n        const step = document.createElement(\"div\");\n        step.innerHTML = parsedTemplate;\n        const element = step.firstElementChild;\n\n        if (element) {\n            document.querySelector(this.appId)?.appendChild(element);\n        }\n    }\n}\n\nexport default InfimoFactory;"],"sourceRoot":""}